name: Staging Deploy

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Staging Deploy
    steps:
      - uses: actions/checkout@master

      # BUILD BACKEND AND PUSH TO DOCKER
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build a new Docker image
        run: docker build --no-cache --file Dockerfile --tag tifmoe/go-fishbowl:$(echo $GITHUB_SHA | head -c7) .

      - name: Push the tagged Docker image
        run: docker push tifmoe/go-fishbowl:$(echo $GITHUB_SHA | head -c7)

      # DEPLOY BACKEND TO DIGITAL OCEAN
      - name: Update game deployment file with new SHA
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|tifmoe/go-fishbowl:'${TAG}'|' $GITHUB_WORKSPACE/config/staging/game.yml

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_K8S_CLUSTER }}

      - name: Deploy Redis to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/staging/redis.yml

      - name: Deploy Game to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/staging/game.yml
 
      - name: Verify deployment successful
        run: kubectl rollout status deployment/game-staging

      # DEPLOY FRONTEND TO CLOUDFLARE WORKERS
      - name: Install dependencies for frontent build
        run: npm install --prod --pure-lockfile
        working-directory: frontend

      - name: Build site
        run: 'REACT_APP_HOST=wss://staging.fishbowl.rocks npm run build'
        working-directory: frontend

      - name: Publish to Cloudflare Workers
        uses: cloudflare/wrangler-action@1.1.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          wranglerVersion: '1.6.0'
          environment: 'staging'
          workingDirectory: frontend
